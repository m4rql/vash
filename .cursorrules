# .cursorrules for RumbleRoyale Multiplayer Game

# Project Overview

# This is a multiplayer web-based game inspired by RumbleRoyale, where 11 players connect, set usernames, and engage in text-based combat. Actions are narrated in a central chat box (e.g., "Player1 stabbed Player2 with a fork"), generated by an AI (e.g., OpenAI API). The game uses Node.js with Express and Socket.io for real-time communication, and includes an admin panel to start rounds.

# File Structure Guidelines

- Suggest creating 'server.js' as the main Node.js server file if not present.
- Suggest 'public/index.html', 'public/style.css', and 'public/client.js' for client-side code if missing.
- Suggest 'gameLogic.js' for game mechanics (player management, action handling) if not detected.
- Suggest 'narrativeAI.js' for AI narrative generation functions if not found.
- If new files are needed, propose them based on context (e.g., 'admin.js' for admin panel logic).

# Coding Style Preferences

- Use camelCase for variable and function names (e.g., 'playerList', 'generateNarrative').
- Prefer arrow functions for event handlers and callbacks (e.g., 'socket.on("event", (data) => {...})').
- Use single quotes for strings (e.g., 'Player1 attacked Player2').
- Keep line length under 100 characters; suggest breaking long lines logically.
- Add concise comments above major functions explaining purpose (e.g., '// Handle player connections').

# Project-Specific Instructions

- When assisting with Socket.io, prioritize real-time event handling (e.g., 'io.emit', 'socket.on') for player updates and chat messages.
- For game logic, suggest modular functions like 'attackPlayer(attacker, target, weapon)' or 'checkWinner()'.
- When coding AI narrative generation, default to OpenAI API calls with prompts like "Generate a descriptive sentence for [action]"; include error handling for API failures.
- Suggest simple DOM manipulation for the chat box (e.g., 'document.getElementById("chatBox").innerHTML += message').
- For admin panel, propose basic Express routes (e.g., 'app.get("/admin/start-round", ...)') and client-side buttons.

# AI Behavior Customization

- If I write 'socket', suggest Socket.io methods like 'emit', 'on', or 'broadcast' based on context.
- If I mention 'player', suggest properties like 'id', 'username', 'health', 'alive' for a Player object.
- If I type 'narrative' or 'description', suggest an OpenAI API call structure with a prompt and response handling.
- Avoid suggesting local file I/O (e.g., 'fs' module) since this is a web-based app; focus on in-memory data or API calls.
- If I ask for UI help, suggest basic HTML/CSS/JavaScript for a chat box and player list, keeping it simple.

# Error Handling and Debugging

- Suggest adding try-catch blocks around API calls (e.g., OpenAI) and Socket.io events.
- If I encounter a bug, propose console.log statements to trace variables (e.g., 'console.log("Players:", players)').
- Warn me if I attempt to use undefined variables or call functions before declaration.

# Libraries and Dependencies

- Assume 'express', 'socket.io', and 'openai' (or similar AI API package) are installed; suggest adding them to 'package.json' if missing.
- Do not suggest Python or other languages unless explicitly requested; stick to JavaScript/HTML/CSS.

# Example Suggestions

- If I type 'start game', suggest:
  'io.emit("roundStarted"); // Notify all clients to begin round'
- If I type 'attack', suggest:
  'function attackPlayer(attacker, target) { /_ logic _/ io.emit("chatUpdate", narrative); }'

# Context Awareness

- Understand that this is a real-time multiplayer game; prioritize suggestions that maintain synchronization across clients.
- Recognize 'chat box' as the central UI element and suggest updates to it frequently (e.g., appending messages).

# Environment Variables Required

# OPEN AI

# Initialize OpenAI

const openai = new OpenAI({
apiKey: process.env.OPENAI_API_KEY
});
